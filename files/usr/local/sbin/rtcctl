#!/usr/bin/python
# --------------------------------------------------------------------------
# Control script for RTC
#
# Supported commands
#  help  - dump list of available commands
#  show  - display datetime, alarm1, alarm2 or all
#  dump  - display registers (binary format)
#  set   - datetime, alarm1, alarm2
#  on    - turn alarm1/alarm2 on
#  off   - turn alarm1/alarm2 on
#  clear - clear alarm1/alarm2-flag
#
# Author: Bernhard Bablok
# License: GPL3
#
# Website: https://github.com/bablokb/pi-wake-on-rtc
#
# --------------------------------------------------------------------------

import sys
import datetime

import SDL_DS3231

# --- help   ---------------------------------------------------------------

def help():
  """
  Dump list of available commands
  """
  print """
Available commands (date and time are synonyms):
     help                                - dump list of available commands
     show  [date|time|alarm1|alarm2|all] - display datetime, alarm1, alarm2 or all
     dump  [control|status|all]          - display registers (binary format)
     set   date|time|alarm1|alarm2       - datetime, alarm1, alarm2
     on    date|time|alarm1|alarm2       - turn alarm1/alarm2 on
     off   date|time|alarm1|alarm2       - turn alarm1/alarm2 on
     clear alarm1|alarm2                 - clear alarm1/alarm2-flag
  """

# --- show   ---------------------------------------------------------------

def show(rtc,argv):
  """
  Display date, time, alarm1, alarm2 or all (date and time are synonyms)
  
  Arg: date|time|alarm1|alarm2|all (default: all)
  """
  if len(argv) == 0:
    show(rtc,["date"])
    show(rtc,["alarm1"])
    show(rtc,["alarm2"])
  elif argv[0] == "date" or argv[0] == "time":
    print "date: %s" % rtc.read_datetime()
  elif argv[0] == "alarm1":
    print "alarm1: %s" % rtc.get_alarm_time(1)
    (enabled,fired) = rtc.get_alarm_state(1)
    print "        (enabled: %s)" % enabled
    print "        (fired:   %s)" % fired
  elif argv[0] == "alarm2":
    print "alarm2: %s" % rtc.get_alarm_time(2)
    (enabled,fired) = rtc.get_alarm_state(2)
    print "        (enabled: %s)" % enabled
    print "        (fired:   %s)" % fired
  else:
    print "invalid argument"

# --- dump   ---------------------------------------------------------------

def dump(rtc,argv):
  """
  Display register (binary format)

  Arg: control|status|all (default: all)
  """
  if len(argv) == 0:
    print "control: %s" % rtc.dump_register(rtc._CONTROL_REGISTER)
    print "status:  %s" % rtc.dump_register(rtc._STATUS_REGISTER)
  elif argv[0] == "control":
    print "control: %s" % rtc.dump_register(rtc._CONTROL_REGISTER)
  elif argv[0] == "status":
    print "status:  %s" % rtc.dump_register(rtc._STATUS_REGISTER)
  else:
    print "invalid argument"

# --- set   ----------------------------------------------------------------

def set(rtc,argv):
  """
  set date, time, alarm1, alarm2 (date and time are synonyms)
  
  Arg: date|time|alarm1|alarm2
  """
  if len(argv) == 0:
    print "missing argument"
  elif argv[0] == "date" or argv[0] == "time":
    hwclock -w -u

  if len(argv) == 1:
    print "missing argument"
    return

  if '/' in argv[1]:
    format = "%m/%d/%Y %H:%M:%S"
  else:
    format = "%d.%m.%Y %H:%M:%S"

  if argv[0] == "alarm1":
    rtc.set_alarm_time(1,datetime.datetime.strptime(argv[1],format))
  elif argv[0] == "alarm2":
    rtc.set_alarm_time(2,datetime.datetime.strptime(argv[1],format))
  else:
    print "invalid argument"

# --- on  -- ---------------------------------------------------------------

def on(rtc,argv):
  """
  Turn alarm1/alarm2 on

  Arg: alarm1|alarm2
  """
  if len(argv) == 0:
    print "missing argument"
  elif argv[0] == "alarm1":
    rtc.set_alarm(1,1)
  elif argv[0] == "alarm2":
    rtc.set_alarm(2,1)
    pass
  else:
    print "invalid argument"

# --- off   ----------------------------------------------------------------

def off(rtc,argv):
  """
  Turn alarm1/alarm2 on

  Arg: alarm1|alarm2
  """
  if len(argv) == 0:
    print "missing argument"
  elif argv[0] == "alarm1":
    rtc.set_alarm(1,0)
  elif argv[0] == "alarm2":
    rtc.set_alarm(2,0)
    pass
  else:
    print "invalid argument"

# --- clear  ---------------------------------------------------------------

def clear(rtc,argv):
  """
  Clear alarm1/alarm2-flag

  Arg: alarm1|alarm2
  """
  if len(argv) == 0:
    print "missing argument"
  elif argv[0] == "alarm1":
    rtc.clear_alarm(1,0)
  elif argv[0] == "alarm2":
    rtc.clear_alarm(2,0)
  else:
    print "invalid argument"

# --- main program   ------------------------------------------------------

if __name__ == "__main__":
  if len(sys.argv) == 1:
    help()
  else:
    dir = dir()
    command = sys.argv[1]
    if command == 'help':
      help()
    elif command in dir:
      rtc = SDL_DS3231.sdl_ds3231(1)      # use i2c-1
      exec command+"(rtc,sys.argv[2:])"
    else:
      print "command %s not found!" % command
      help()
